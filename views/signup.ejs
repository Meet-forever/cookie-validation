<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/style.css" type="text/css" />
    <title>Sign Up</title>
</head>
<body>
    <div class="container">
        <div>
            <form class="form_style" action= "<%= formurl %>/signup" method="POST">
                <h1>Sign Up</h1>
                <label for="user_name">User Name</label>
                <input type="input" name="username" id="user_name" />
                <br/>
                <label for="user_password">Password</label>
                <input type="password" name="password" id="user_password" />
                <br />
                <button type="submit">Submit</button>
            </form> 
        </div>
    </div>
    <div class="container">
        <div class="centerThisDiv">
            <p>
                When a user presses the signup button, their link gets redirected to the following function.
                The following function captures the GET request, and it renders the user's view page to the sign up page, which was stored on the server.
                But, why are we using "authenticated" as a middleware? Its explaination is written below.
            </p>
            <pre>
app.get('/signup', authenticated, (req, res)=>{
    res.render('signup');
})
            </pre> 
        </div>
        <div class="centerThisDiv">
            <p>
                Authenticated function checks if a user already has a authentication cookie, and if they have, then it checks if it's valid by parsing the database. 
                This method is mostly used to make user experience better. Suppose, you closed your browser and want to access this site again, then this stie will remember
                you till your cookie expires, and you will be able to access this site again without any sign in intruption.
            </p>
            <pre>
//If user is authenticated
function authenticated(req, res, next){
    const {cookies}  = req;
    if("remember_me" in cookies){
        if(data.find(x => cookies.remember_me === x.cookie)) res.redirect('/home');
        else next();
    }
    else next();
}        
            </pre> 
        </div>
            <div class="centerThisDiv">
                <p>
                    When a new user submits the above form, their link gets redirected to the following function.
                    The following function captures the POST request, and it stores the new user data in the form of object, and append it to the data array. 
                    Validate function's explaination is given after the function.
                </p>
                <pre>
app.post('/signup', validate, (req, res)=>{
    data.push({
        username: req.body.username,
        password: req.body.password,
        cookie: ""
    })
    res.redirect('/signin');
})
</pre> 
</div>
            <div class="centerThisDiv">
                <p>
The following fucntion validates the input values for the username and password. It also helps to prevent xxs attacks. 
                </p>
                <pre>
//Form validation function
function validate(req, res, next){
    const user_pattern = /^[a-zA-Z0-9_]*$/g;
    const password_pattern = /^[a-zA-Z0-9@%!]*$/g;
    if(req.body.username && req.body.password
        && req.body.username.length &lt; 10 && req.body.password.length &lt; 15 
        && user_pattern.test(req.body.username) && password_pattern.test(req.body.password)) next();
    else res.status(415).send("Invalid Format");
} 
                </pre> 
            </div>
    </div>   
</body>
</html>